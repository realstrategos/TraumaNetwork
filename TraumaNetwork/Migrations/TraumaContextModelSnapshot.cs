// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TraumaNetwork.Models;

namespace TraumaNetwork.Migrations
{
    [DbContext(typeof(TraumaContext))]
    partial class TraumaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TraumaNetwork.Models.AgeGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("ID");

                    b.ToTable("AgeGroup");
                });

            modelBuilder.Entity("TraumaNetwork.Models.Agency", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyAgeGroup", b =>
                {
                    b.Property<Guid>("AgencyID");

                    b.Property<Guid>("AgeGroupID");

                    b.HasKey("AgencyID", "AgeGroupID");

                    b.HasAlternateKey("AgeGroupID", "AgencyID");

                    b.ToTable("AgencyAgeGroup");
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyCategory", b =>
                {
                    b.Property<Guid>("AgencyID");

                    b.Property<Guid>("CategoryID");

                    b.HasKey("AgencyID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("AgencyCategory");
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyFinancialPlan", b =>
                {
                    b.Property<Guid>("AgencyID");

                    b.Property<Guid>("FinancialID");

                    b.HasKey("AgencyID", "FinancialID");

                    b.HasIndex("FinancialID");

                    b.ToTable("AgencyFinancialPlan");
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyLocation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<Guid>("AgencyID");

                    b.Property<string>("City");

                    b.Property<string>("State");

                    b.Property<string>("Zip");

                    b.HasKey("ID");

                    b.HasIndex("AgencyID");

                    b.ToTable("AgencyLocation");
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyService", b =>
                {
                    b.Property<Guid>("AgencyID");

                    b.Property<Guid>("ServiceID");

                    b.Property<string>("TypicalResponseTime");

                    b.HasKey("AgencyID", "ServiceID");

                    b.HasIndex("ServiceID");

                    b.ToTable("AgencyService");
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencySpecialty", b =>
                {
                    b.Property<Guid>("AgencyID");

                    b.Property<Guid>("SpecialtyID");

                    b.HasKey("AgencyID", "SpecialtyID");

                    b.HasIndex("SpecialtyID");

                    b.ToTable("AgencySpecialty");
                });

            modelBuilder.Entity("TraumaNetwork.Models.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("TraumaNetwork.Models.FinancialPlan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("ID");

                    b.ToTable("FinancialPlan");
                });

            modelBuilder.Entity("TraumaNetwork.Models.Service", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("ID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("TraumaNetwork.Models.Specialty", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("ID");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyAgeGroup", b =>
                {
                    b.HasOne("TraumaNetwork.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TraumaNetwork.Models.Agency", "Agency")
                        .WithMany("AgeGroups")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyCategory", b =>
                {
                    b.HasOne("TraumaNetwork.Models.Agency", "Agency")
                        .WithMany("Categories")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TraumaNetwork.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyFinancialPlan", b =>
                {
                    b.HasOne("TraumaNetwork.Models.Agency", "Agency")
                        .WithMany("FinancialPlans")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TraumaNetwork.Models.FinancialPlan", "Financial")
                        .WithMany()
                        .HasForeignKey("FinancialID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyLocation", b =>
                {
                    b.HasOne("TraumaNetwork.Models.Agency", "Agency")
                        .WithMany("Locations")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencyService", b =>
                {
                    b.HasOne("TraumaNetwork.Models.Agency", "Agency")
                        .WithMany("Services")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TraumaNetwork.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TraumaNetwork.Models.AgencySpecialty", b =>
                {
                    b.HasOne("TraumaNetwork.Models.Agency", "Agency")
                        .WithMany("Specialties")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TraumaNetwork.Models.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
